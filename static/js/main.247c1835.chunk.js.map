{"version":3,"sources":["Map Components/SelectComponent.js","Map Components/AdminMap.js","App.js","reportWebVitals.js","index.js"],"names":["SelectComponent","options","className","showSearch","clearIcon","placeholder","optionFilterProp","size","onChange","value","console","log","onSearch","filterOption","input","option","label","toLowerCase","includes","AdminMap","props","useState","map","setMap","setFeaturesLayer","availableLayers","setAvailableLayers","mapElement","useRef","current","basemaps","LayerGroup","title","fold","layers","TileLayer","type","visible","opacity","source","OSM","XYZ","url","maxZoom","administrativeLayers","ImageLayer","ImageWMS","crossOrigin","params","LAYERS","ratio","serverType","wasrebLayers","useEffect","initialFeaturesLayer","VectorLayer","VectorSource","initialMap","Map","view","View","projection","center","zoom","target","controls","Zoom","FullScreen","ScaleLine","minWidth","MousePosition","coordinateFormat","coordinate","format","OverviewMap","layerSwitcher","LayerSwitcher","reverse","groupSelectStyle","addControl","setTarget","layersList","fetch","then","response","text","data","json","xml2json","JSON","parse","elements","forEach","layer","name","fullLayerName","push","catch","error","stringify","imageLayer","getLayers","array_","addLayer","removeLayer","ref","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.247c1835.chunk.js","sourcesContent":["import React from 'react'\nimport { Select } from 'antd';\nimport './SelectComponent.css'\n\nconst SelectComponent = ({options}) => {\n\n    const onChange = (value) => {\n        console.log(`selected ${value}`);\n    };\n\n    const onSearch = (value) => {\n        console.log('search:', value);\n    };\n      \n  return (\n    <>\n        <Select \n            className='layer-select-component'\n            showSearch\n            clearIcon\n            placeholder=\"Select a layer to edit\"\n            optionFilterProp=\"children\"\n            size=\"large\"\n            onChange={onChange}\n            onSearch={onSearch}\n            filterOption={(input, option) =>\n                (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\n            }\n            options={options}\n        />\n    </>\n  )\n}\n\nexport default SelectComponent","import React, { useState, useRef, useEffect } from 'react';\nimport { xml2json } from 'xml-js';\n\n// OpenLayers imports \nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport TileLayer from 'ol/layer/Tile'\nimport VectorLayer from 'ol/layer/Vector'\nimport VectorSource from 'ol/source/Vector'\nimport ImageLayer from 'ol/layer/Image';\nimport ImageWMS from 'ol/source/ImageWMS';\nimport OSM from 'ol/source/OSM';\nimport XYZ from 'ol/source/XYZ'\nimport Zoom from 'ol/control/Zoom';\nimport FullScreen from 'ol/control/FullScreen';\nimport ScaleLine from 'ol/control/ScaleLine';\nimport MousePosition from 'ol/control/MousePosition';\nimport OverviewMap from 'ol/control/OverviewMap'\nimport LayerGroup from \"ol/layer/Group\";\nimport LayerSwitcher from 'ol-layerswitcher';\nimport { format } from \"ol/coordinate\";\n\nimport \"ol/ol.css\";\nimport 'ol-layerswitcher/dist/ol-layerswitcher.css';\n\nimport './AdminMap.css'\nimport SelectComponent from './SelectComponent';\n\nconst AdminMap = (props) => {\n\n    const [ map, setMap ] = useState()\n    const [ featuresLayer, setFeaturesLayer ] = useState()\n    const [ availableLayers, setAvailableLayers ] = useState()\n\n    // get ref to div element - OpenLayers will render into this div\n    const mapElement = useRef()\n\n    // state ref that will be accessed in OpenLayers callback functions\n    const mapRef = useRef()\n    mapRef.current = map\n\n    //Mouse position coordinates format\n    var coordFormat = \"Lon {x}, Lat {y}\";\n\n    // Sample array of layers that can be edited\n    const editableLayers = [\n        {\n            value: 'WASREB:low_income_area_edit',\n            label: 'low_income_area_edit'\n        },\n        {\n            value: 'WASREB:licensed_service_area',\n            label: 'licensed_service_area'\n        }\n    ]\n\n    // map layer groups\n    let basemaps = new LayerGroup({\n        title: 'Base Maps',\n        fold: 'open',\n        layers: [\n            new TileLayer({\n                title: 'Standard',\n                type: 'base',\n                visible: true,\n                opacity: 1,\n                source: new OSM(),\n            }),\n            new TileLayer({\n                title: 'Aerial',\n                type: 'base',\n                visible: false,\n                source: new XYZ({\n                    url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n                    maxZoom: 19\n                })\n            }),\n            new TileLayer({\n                title: \"Topography\",\n                type: \"base\",\n                visible: false,\n                source: new XYZ({\n                    url: \"https://tile.opentopomap.org/{z}/{x}/{y}.png\",\n                }),\n            })\n        ]\n    })\n\n    let administrativeLayers = new LayerGroup({\n        title: 'Administrative Boundaries',\n        layers: [\n            new ImageLayer({\n                title: 'Kenya Boundary',\n                source: new ImageWMS({\n                    crossOrigin: 'anonymous',\n                    url: 'http://102.37.157.16:8080/geoserver/wms',\n                    params: {\n                        LAYERS: \"WASREB:country\"\n                    },\n                    ratio: 1,\n                    serverType: \"geoserver\",\n                })\n            }),\n            new ImageLayer({\n                title: 'Counties',\n                source: new ImageWMS({\n                    crossOrigin: 'anonymous',\n                    url: 'http://102.37.157.16:8080/geoserver/wms',\n                    params: {\n                        LAYERS: \"WASREB:county\"\n                    },\n                    ratio: 1,\n                    serverType: \"geoserver\",\n                })\n            })\n        ]\n    })\n\n    let wasrebLayers = new LayerGroup({\n        title: 'WASREB Layers',\n        layers: []\n    })\n\n    // Initialize map on first render \n    useEffect(() => {\n\n        // create and add vector source layer\n        const initialFeaturesLayer = new VectorLayer({\n            source: new VectorSource()\n        })\n\n        // create map\n        const initialMap = new Map({\n            layers: [basemaps, administrativeLayers],\n            view: new View({\n                projection: 'EPSG:4326',\n                center: [37.68, 0.5],\n                zoom: 7\n            }),\n            target: mapElement.current,\n            controls: [\n                new Zoom({\n                    className: 'map-zoom'\n                }),\n                new FullScreen({\n                    className: 'map-fullscreen'\n                }),\n                new ScaleLine({\n                    minWidth: 100\n                }),\n                new MousePosition({\n                    className: 'mouse-position',\n                    coordinateFormat: function (coordinate) {\n                        return format(coordinate, coordFormat, 4);\n                    },\n                    projection: \"EPSG:4326\",\n                }),\n                new OverviewMap({\n                    // className: 'map-overview-map',\n                    layers: [\n                        new TileLayer({\n                            source: new OSM(),\n                        }),\n                    ]\n                })\n            ]\n        })\n    \n        // save map and vector layer references to state\n        setMap(initialMap)\n        setFeaturesLayer(initialFeaturesLayer)\n\n        // map layer switcher\n        const layerSwitcher = new LayerSwitcher({\n            reverse: true,\n            groupSelectStyle: 'group'\n        })\n\n        initialMap.addControl(layerSwitcher)\n\n        // cleanup\n        return () => {\n            initialMap.setTarget(null)\n        }\n  \n    },[]);\n\n    // get the accessible layers\n    useEffect(() => {\n        let layersList = []\n        let url = \"http://102.37.157.16:8080/geoserver/ows?service=wms&version=1.3.0&request=GetCapabilities&namespace=KIAWASCO&authkey=bad69a50-fb45-4a47-9079-ac540c58893c\"\n        fetch(url)\n            .then((response) => response.text())\n            .then((data) => {\n                const json = xml2json(data);\n                const obj = JSON.parse(json)\n                const layersData = obj.elements[0].elements[1].elements[2].elements\n                layersData.forEach((layer) => {\n                    if (layer.name == \"Layer\"){\n                        let fullLayerName = layer.elements[0].elements[0].text\n                        layersList.push(fullLayerName)\n                    }\n                });\n                setAvailableLayers(layersList)\n            }).catch((error) => console.log(error))\n    },[])\n\n    // dynamically add the layers to the WASREB layer group.\n    useEffect(() => {\n        if (availableLayers) {\n            let layersList = []\n            availableLayers.forEach((layer) => {\n                console.log(JSON.stringify(layer))\n                let imageLayer = new ImageLayer({\n                    title: `${layer}`,\n                    source: new ImageWMS({\n                        crossOrigin: 'anonymous',\n                        url: 'http://102.37.157.16:8080/geoserver/wms',\n                        params: {\n                            LAYERS: `${layer}`\n                        },\n                        ratio: 1,\n                        serverType: \"geoserver\",\n                    })\n                });\n                wasrebLayers.getLayers().array_.push(imageLayer)\n            })\n            map.addLayer(wasrebLayers)\n        }\n\n        // cleanup\n        return () => {\n            if (map) {\n                map.removeLayer(wasrebLayers)\n            }\n        }\n    }, [availableLayers])\n    \n\n    return (\n        <div ref={mapElement} className=\"map-container\">\n            <SelectComponent options={editableLayers}/>\n        </div>\n    )\n}\n\nexport default AdminMap","// import './App.css';\nimport AdminMap from './Map Components/AdminMap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AdminMap />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}